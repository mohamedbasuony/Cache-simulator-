#include "Direct_Mapping.h"

#define        DBG                1
#define        DRAM_SIZE        (64*1024*1024)
#define        CACHE_SIZE        (64*1024)    // Change for different sizes
#define        NO_OF_Iterations    1000000    // Change to 1,000,000

enum cacheResType { MISS = 0, HIT = 1 };
char* msg[2] = { (char*)"Miss",(char*)"Hit" };

Direct_Mapping directmap;  // object of the class map we created  (represents the direct map array)
//dissect famap;      // object of the class map we created   (represents the fully associative array)


/* The following implements a random number generator */
unsigned int m_w = 0xABABAB55;    /* must not be zero, nor 0x464fffff */
unsigned int m_z = 0x05080902;    /* must not be zero, nor 0x9068ffff */
unsigned int rand_()
{
    m_z = 36119 * (m_z & 65535) + (m_z >> 16);
    m_w = 16000 * (m_w & 65535) + (m_w >> 16);
    return (m_z << 16) + m_w;  /* 32-bit result */
}

unsigned int memGen2()
{
    static unsigned int addr = 0;
    return (addr++) % (DRAM_SIZE) ;
}

unsigned int memGen3()
{
    static unsigned int addr = 0;
    return  rand_() % (64 * 1024) ;
}

unsigned int memGen1()
{
    return rand_() % (DRAM_SIZE);
}

unsigned int memGen4()
{
    static unsigned int addr = 0;
    return (addr++) % (1024 * 4) ;
}

unsigned int memGen5()
{
    static unsigned int addr = 0;
    return (addr++) % (64 * 1024);
}

unsigned int memGen6()
{
    static unsigned int addr = 0;
    return (addr += 64) % (5);      // This function will generate numbers that are within the range 1-4. The addresses generated by this function will result in a high hit rate. s
}


// Direct Mapped Cache Simulator
cacheResType cacheSimDM(unsigned int addr)
{
    // This function accepts the memory address for the memory transaction and
    // returns whether it caused a cache miss or a cache hit

    if (directmap.Check_Cache(addr) == true)
        return HIT;

    else {
        directmap.Add_To_Cache(addr);
        return MISS;

    }
}

int main()
{
    unsigned int hit = 0;
    cacheResType r;
    unsigned int addr;
    
    cout << "Direct Mapped Cache Simulator\n";
    for (int inst = 0; inst < NO_OF_Iterations; inst++)
    {
        addr = memGen6();
        r = cacheSimDM(addr);
        if (r == HIT) hit++;
        cout << "0x" << setfill('0') << setw(8) << dec << addr << " (" << msg[r] << ")\n";
    }
    
    int Hit_Ratio = (100 * hit / NO_OF_Iterations) ;
    cout << "Hit ratio = " << dec << Hit_Ratio << endl ;
    cout << "Miss ratio = " << 100 - Hit_Ratio << endl ;
}
